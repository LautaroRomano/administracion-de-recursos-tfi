// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String
  address        String?
  password       String
  dni            String?
  birthDay       DateTime?
  role           String?
  area           String?
  profilePicture String?
  salary         String?
  createdAt      DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  disabled       Boolean   @default(false)
}

model Proveedores {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phone     String?
  address   String?
  price     Float?
  period    String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  disabled  Boolean  @default(false)
}

model Trabajadores {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  name                 String
  phone                String?
  bio                  String?
  location             Locations?             @relation(fields: [locationId], references: [id])
  locationId           Int?
  rating               Float?
  totalReviews         Int                    @default(0)
  address              String?
  availability         Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updateAt             DateTime               @updatedAt
  disabled             Boolean                @default(false)
  profilePicture       String?
  TrabajadorCategories TrabajadorCategories[]
}

model Locations {
  id           Int            @id @default(autoincrement())
  description  String
  trabajadores Trabajadores[]
}

model Categories {
  id                   Int                    @id @default(autoincrement())
  description          String
  TrabajadorCategories TrabajadorCategories[]
}

// Tabla intermedia para la relaci√≥n de muchos a muchos entre Trabajadores y Categories
model TrabajadorCategories {
  trabajadorId Int
  categoryId   Int
  trabajador   Trabajadores @relation(fields: [trabajadorId], references: [id], onDelete: Cascade)
  category     Categories   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([trabajadorId, categoryId])
}
